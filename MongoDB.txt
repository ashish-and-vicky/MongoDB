Documents
	- is a simple key-value pair
	- MongoDB valid document example
	- Schema can be different for different documents
	- Document can have any datatype - as long as valid in MongoDB context
	- User defined schema in mongoDB and they are not static or fixed
	- MongoDB will add a key automatically for each document eg. _id
	  eg
	{
		"_id": "<unique-value>",
		"firstname": "Ashish".
		"lastname": "Sharma".
		"email": "ashish@gmail.com".
	},
	{
		"_id": "<unique-value>",
		"mobile": 88302563233,
		"phone": 549456565
	}

Collections
	- Collection do NOT enforce any schema
		- No joins concept
	- We can join multiple collections using Aggregation
	- Its a set of Documents
	- Can have any number of documents
	- Documents can have any dynamic schema. They can be same or different.

Database
	- 1 or more collection togather is a DB
	
	
	
Install Extension MongoDB for VS Code in VS Code
	- Open the path C:\Program Files\MongoDB\Server\4.4\bin in the VS Code terminal
	- Type mongo.exe or mongo
	- Now use the below commands



BSON & JSON
		-> JSON
			- easy to parse, easy to render in most languages
			
		-> BSON
			- Extended version of JSONhich are not supported by JSON
			- MongoDB data type
				-> store and process data
			- Binary-encoded JSON = BSON
			- has some extended datatypes which are not supported by JSON
				-> date
				-> timestamp
				-> Object Id
				
				
				

Insert documents into collection
	- We can insert any number of documents into a collection
	- We can insert one or more documents into a collection
	- Every document we insert will have a unique "_id"
		- the value for this key is always unique and of 24 characters
		- _id  as a primary key in your collection
		- we can change the id butit is tricky
		
		

Queries
	- using find method of MongoDB with Operators
	- Eq
	- lt - less than
	- lte - less than equal
	- gt - greater than
	- gte - greater than equal

	- $and
	- $or
	
	
	
Projection
	- By default it will bring up all the keys/values from all documents in a collection
	eg. db.Products.find({}, {"city": 1, "_id": 0}) will only display city and not id.....this is used to display only specific values



Aggregation
	- Aggregation is very similar to the find command, where you can find command , where you can provide the criteria for you query in the form of JSON document
	- The key element to aggregation is called the pipeline
	- It also helps us in performing min, max. sum etc.
	
	Whats Pipeline?
	- A sequence of data aggregation operations or stages
	- Pipeline is an Array
	
	eg. var pipeline = [ //these multiple stages are called as pipeline 
		{$group : {"_id": "$city"}},
		{$sort : {"leadName":1}},
		{$limit: 4}
	];
	
	db.leads.aggregate(pipeline);
	
	
	
Indexes
	- Indexes are a faster way to find information
	- By default every collection will have an index on "_id" key
	

	


Commands

	- show database - list all the databases in MongoDB
	
	- use <database-name> - select the database workspace as current working DB
	
	- db - show you the database you are currently working on - if not then it will create - but will only display when we add a collection/ document
	
	- To drop a database, first we need to select the DB
		- use <database-name>;
		- db.dropDatabase();
		
		
		
	- To create a new collection 
		- db.createCollection("<name of collection>");
		
	- To drop a collection
		- db.<collection-name>.drop(); or <db-name>.<collection-name>.drop();
		
		
		
	- To insert any document into collection
		- db.<collection-name>.insert({"name": "Ashish"})
		
	- To insert many documents at once into a collection
		db.<collection-name>.insertMany([
		{"name": "Ashish"},
		{"name": "Sai Ram"}
		]);
		
		
		
	- To update any document into collection
		db.leads.update(
			{"name": "Micky"},
			{
				$set: {
					"mobile": "12345",
					"isActive": true
				}
			}
		);
		
	- To update many documents at once in a collection
		db.leads.update(
			{"isActive": true},
			{
				$set: {
					"isActive": true	
				}
			}
		);
		
		
		
	- To read the documents in a collection
		- db.<collection-name>.find(); //returns all the documents
		
		- db.<collection-name>.find({"key1": "value", "key2": "value2"}); //returns only the 1st document
		
		- db.<collection-name>.findOne();
		
		- db.<collection-name>.findOneAndReplace({"key1":"value", "key": "value2"}, <replacement>)
		
		- db.<collection-name>.findOneAndDelete({"key1":"value", "key": "value2"});
		
	- Find methods with multiple conditions (AND) by default
		- db.Products.find({"Tax": "30", "Salary": "120000"})
		
	- Find method with tax less than equal to 30
		- db.Products.find({"Tax": { $lte: "30"}})
	
	- Find method with tax greater than equal to 30
		- db.Products.find({"Tax": { $gt: "30"}})
		
	- Find method with AND operator
		- db.Products.find($and : [{"Tax": "30"}, {"Salary": {$lte: "100000"}} ] });
		
	
	
	- To delete documents in a collection
		- db.<collection-name>.deleteOne(); //finds all documents in a collection
		
		- db.<collection-name>.deleteMany({}); //will delete many documents at once-----when passed on with empty curly braces, it will delete all documents in the collection
		
		
		
Selecting Fields
	- db.Products.find({}, {"city": 1}) or db.Products.find({<condition>}, {"city": 1})//gets city key from all documents from the collection with '_id' of each document of where it is....here in second {} we have to pass either 0 (don't want) or 1 (want)
	eg. { "_id" : ObjectId("60b0be611649952ca533315e"), "city" : "Nagpur" } ....therefore to remove this _id we can can write it as 
	
	- db.Products.find({}, {"city": 1, "_id": 0})
	
	- db.Products.find({"Tax": {$lte: "30"}}, {"Tax": 1, "city": 1, "_id": 0}) //this will give Tax with city and not _id
	


Aggregation
	- db.Products.aggregate(pipeline, options)
	
	Aggregate Stages
		- $count
		- $group
		- $limit
		- $lookup
		- $match
		- $merge
		- $sort
		- $project
		- $unwind
		- $sunset
		
	- To find Pipeline & Aggregate
	eg. var pipeline = [
		{$group : {"_id": "$city"}},
		{$sort : {"leadName":1}},
		{$limit: 4}
	];
	
	- db.leads.aggregate(pipeline);
	
	
	
Limit
	- We may not always want all documents all the time. So to avoid that, we add limit
	- db.<collection-name>.find().limit(4);
	
	
	
Skip
	- We may want to skip some documents we don't need
	- db.<collection-name>.find().skip(3)
	
	
Sorting
	db.<collection-name>.find().sort({"leadName": 1}) // 1 means in ascending order & -1 means descending order

	
Indexes
	- db.<collection-name>.ensureIndex("leadName": 1)
	
	
Backup and Restore
	- mongodump.exe or mongodump.exe --out C:\Data\backup_mongo
	- After dropping a database go to 'dump' folder for confirmation weather that folder is made or not after droping by typing -- cd .\dump
	- mongorestore.exe ---- this will restore the collection which was previously deleted